- set_page_title "Add Photograph #{@building && "to #{@building.name}"}#{@person && "to #{@person.name}"}"

= error_messages_for @asset

= simple_form_for @asset, html: { id: 'photo-wizard', data: { controller: 'photo-wizard' } } do |form|
  .card.active
    .float-right
      button.btn.btn-secondary.btn-next.step-1-next-button type="button" disabled=!form.object.file.attached? Next &raquo;
    .card-body
      .row
        .col-sm-6.col-xs-12
          = form.input :file, as: :file, label: 'Upload your photo', hint: 'JPG files only please!', input_html: { accept: 'image/jpeg' }
          - if form.object.file.attached?
            .alert.alert-success Your photo is uploaded. To get to the other stuff, simply click Next to get to it. You only need to click "Choose file" if you want to replace the photo that was already uploaded.
        .col-sm-6.col-xs-12#selected-file
          - if form.object.file.attached?
            = image_tag form.object.file
    .card-footer.d-flex.justify-content-center
      button.btn.btn-secondary.btn-lg.btn-next.step-1-next-button type="button" disabled=!form.object.file.attached? Next &raquo;

  .card
    = render 'media/wizard_header_nav_buttons'
    .card-body
      .row
        .col-sm-8.col-xs-12
          = form.input :caption, as: :text, label: "Caption", hint: "The Caption is text that appears underneath the photo on the building record. Note that the caption should not include the date which is a separate field that will display along with the caption."
          = form.input :description, as: :text, label: "Description", hint: "The Description is secondary text that appears when someone selects the photo to enlarge it. The Description can be standard text used to identify the collection that houses the photo in your institution, or it can be used in whichever way your institution sees fit."

        .col-3.offset-1.thumb= thumb_for form.object.file
    = render 'media/wizard_footer_nav_buttons'

  .card
    = render 'media/wizard_header_nav_buttons'
    .card-body
      .row
        .col-sm-8.col-xs-12
          - if form.object.building_ids.present?
            = render 'media/building_fields', form:
          - else
            #building-question
              p.lead Is this a picture of a building?
              p
                button.btn.btn-lg.btn-primary type="button" YES
                | &nbsp;
                button.btn.btn-secondary.btn-lg.btn-next type="button" NO
            #building-fields style="display:none"
              = render 'media/building_fields', form: form
        .col-3.offset-1.thumb= thumb_for form.object.file
    = render 'media/wizard_footer_nav_buttons'

  .card
    = render 'media/wizard_header_nav_buttons'
    .card-body
      .row
        .col-sm-8.col-xs-12
          - if form.object.person_ids.present?
            = render 'media/person_fields', form:
          - else
            #person-question
              p.lead Is this a picture of a person?
              p
                button.btn.btn-lg.btn-primary type="button" YES
                | &nbsp;
                button.btn.btn-secondary.btn-lg.btn-next type="button" NO
            #person-fields style="display:none"
              = render 'media/person_fields', form: form
        .col-3.offset-1.thumb= thumb_for form.object.file
    = render 'media/wizard_footer_nav_buttons'

  .card
    = render 'media/wizard_header_nav_buttons'
    .card-body
      .row
        .col-sm-8.col-xs-12
          p.alert.alert-info You only need to do this if latitude and longitude are empty, or the marker is in the wrong place.
          input.form-control.mb-3#pac-input type="text" placeholder="Enter a location to find on map"
          #photograph-map.mb-3 data-center="[#{form.object.latitude || AppConfig[:latitude]},#{form.object.longitude || AppConfig[:longitude]}]"
          .row
            .col-6= form.input :latitude
            .col-6= form.input :longitude
        .col-3.offset-1.thumb= thumb_for form.object.file
    = render 'media/wizard_footer_nav_buttons'

  .card
    = render 'media/wizard_header_nav_buttons'
    .card-body
      .row
        .col-sm-8.col-xs-12
          = render 'media/date_fields', form:
        .col-3.offset-1.thumb= thumb_for form.object.file
    = render 'media/wizard_footer_nav_buttons'

  .card
    .float-right
      button.btn.btn-secondary.btn-prev type="button" &laquo; Previous
    .card-body
      .row
        .col-sm-8.col-xs-12
          = form.input :notes
        .col-3.offset-1.thumb= thumb_for form.object.file
    .card-footer.d-flex.justify-content-center
      = form.submit 'Submit', class: 'btn btn-lg btn-primary'

p.clearfix.lead.text-center You can click Previous and Next buttons at any time.

script async="async" defer="defer" src="https://maps.googleapis.com/maps/api/js?key=#{AppConfig[:google_api_key]}&libraries=places"
